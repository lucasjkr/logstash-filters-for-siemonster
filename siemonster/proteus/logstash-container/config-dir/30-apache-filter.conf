filter {
  if "apache" in [tags] { 
  #ignore log comments
  if [message] =~ "^#" {
    drop {}
  }
  #ignore server status requests
  if "serverstatus.cfm" in [message] {
    drop {}
  }
  grok {
      # See the following URL for a complete list of named patterns
      # logstash/grok ships with by default:
      # https://github.com/logstash/logstash/tree/master/patterns
      #
      # The grok filter will use the below pattern and on successful match use
      # any captured values as new fields in the event.
      match => { "message" => "%{COMBINEDAPACHELOG}" }
#      remove_field => ["message"]
    }
  
  #Set the Event Timesteamp from the log
	date {
      # Try to pull the timestamp from the 'timestamp' field (parsed above with
      # grok). The apache time format looks like: "18/Aug/2011:05:44:34 -0700"
      match => [ "log_timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
useragent {
        source=> "agent"
        prefix=> "browser"
  }
  mutate {
	remove_field => [ "log_timestamp"]
  }

grok {
      match => { "clientip" => "%{IP:target_ip}"
 }
}  
#https://logstash.jira.com/browse/LOGSTASH-1354 Parse out private IP range
if [target_ip] and [target_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
    geoip {
         database => "/etc/logstash/GeoLiteCity.dat"
         source => "target_ip"
         add_tag => [ "geoip" ]
    }
# Uncomment the following lines after running /etc/logstash/maliciousIP.py to generate /etc/logstash/maliciousIP.yaml
#    translate { 
#    field => "target_ip"
#    destination => "malicious_IP"
#    dictionary_path => '/etc/logstash/maliciousIP.yaml'
#  }
    #Delete 0,0 in geoip.location if equal to 0,0
    if ([geoip.location] and [geoip] =~ "0,0") {
      mutate {
        replace => [ "geoip.location", "" ]
         }
       }
     }
      


	translate {
      field => "response"
      destination => "response"
      override => true
      dictionary => [ "100", "100 Continue",
                      "101", "101 Switching protocols",
                      "200", "200 OK",
                      "201", "201 Created",
                      "202", "202 Accepted",
                      "203", "203 Non-authoritative information",
                      "204", "204 No content",
                      "205", "205 Reset content",
                      "206", "206 Partial content",
                      "207", "207 Multi-Status",
                      "301", "301 Moved Permanently",
                      "302", "302 Object moved",
                      "304", "304 Not modified",
                      "307", "307 Temporary redirect",
                      "400", "400 Bad request",
                      "401", "401 Access denied",
                      "403", "403 Forbidden",
                      "404", "404 Not found",
                      "405", "405 Method not allowed",
                      "406", "406 Client browser does not accept the MIME type of the requested page",
                      "407", "407 Proxy authentication required",
                      "412", "412 Precondition failed",
                      "413", "413 Request entity too large",
                      "414", "414 Request-URI too long",
                      "415", "415 Unsupported media type",
                      "416", "416 Requested range not satisfiable",
                      "417", "417 Execution failed",
                      "423", "423 Locked error",
                      "500", "500 Internal server error",
                      "501", "501 Header values specify a configuration that is not implemented",
                      "502", "502 Web server received an invalid response while acting as a gateway or proxy",
                      "503", "503 Service unavailable",
                      "504", "504 Gateway timeout",
                      "505", "505 HTTP version not supported"
                      ]
    }
#If hostnames are not resolved then use the translate plugin
#translate {
#      field => "host"
#     destination => "host"
#     override => true
#      dictionary => [ "192.168.0.1", "host1.com",
#                      "192.168.0.2", "host2.com"
#]
#    }
  }
}



