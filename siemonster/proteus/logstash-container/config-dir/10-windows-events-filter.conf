# Configuration file as provided by Kustodian in Siemonster 2.5
# Assumed copyright Kustodian 2017 under GUN Public License

filter {
     if "eventlog" in [tags] {
    # If it is an eventlog message, change some fields to lower case, and rename some fields so they match logstash's default
	if "eventlog" in [tags] {
        mutate {
            lowercase => [ "EventType", "Severity" ]
#            rename => [ "Hostname", "host" ]
            rename => [ "Message", "message" ]
  }
# Set date as Event Time
      date {
        match => ["EventTime", "YYYY-MM-dd HH:mm:ss"]
        target => "@timestamp"
#        timezone => "Australia/Melbourne"
    }
#Geolocate logs that have SourceAddress and if that SourceAddress is a non-RFC1918 address or APIPA address
if [IpAddress] and [IpAddress] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
    geoip {
         database => "/etc/logstash/GeoLiteCity.dat"
         source => "IpAddress"
         target => "geoip"
         add_field => [ "[geoip][location]", "%{[geoip][longitude]}" ]
         add_field => [ "[geoip][location]", "%{[geoip][latitude]}"  ]
    }
    #Delete 0,0 in geoip.location if equal to 0,0
    if ([IpAddress.location] and [IpAddress.location] =~ "0,0") {
      mutate {
        replace => [ "geoip.location", "" ]
      }
	}
	mutate {
	convert => ["[geoip][location]", "float"]
        rename => [ "geoip", "GeoLocation" ]
    }	  
}
# Translate common Event ID's
      translate {
      field => "EventID"
      destination => "EventDesc"
      override => true
      fallback => "no match"
      dictionary_path => "/etc/logstash/eventid.yaml"
         }
    }

# Remove IPv6 prefix from IPAddress if not used
#if [IpAddress] =~ "ffff" {
#   grok {
#    match => ["IpAddress", "^.*?\::ffff:%{GREEDYDATA:IpAddress}$"]
#    overwrite => ["IpAddress"]
#        }
#   }
# For Powershell events, extract the command details and create alert field
if [SourceName] == "PowerShell" {
    grok {
       patterns_dir => "/etc/logstash/patterns"
       match => { "message" => "%{PWRSHELL:scriptname}" }
       }
    if [scriptname] {
       mutate {
         add_field => { "PwrShellAlert" => "true" }
       }
     }
   }
#Identify machine accounts
if [TargetUserName] =~ /\$/ {
            mutate {
               add_field => { "machine" => "true" }
    }
}       else {
        mutate {
        add_field => { "machine" => "false" }
          
        }
  }
# Extract username from email
if [TargetUserName] =~ /\@/ {
    grok {
        match => ["TargetUserName", "%{WORD:TargetUserName}"]
        overwrite => ["TargetUserName"]
        }
   }
#Add field for admin users  
#if [EventID] == 4728 or [EventID] == 4756 {	
#	if [TargetUserName] == "Admin Group 1" or [TargetUserName] == "Admin Group 2" {
#			mutate {
#				add_field => { "admin" => "true" }
#	}
#   }    
#  }
#Try message parse
#kv {
#  field_split => "\\n"
#  value_split => ":"
#  trimkey => "\s"
#  }
if [EventID] == 4771 or [EventID] == 4625 and [machine] == "false"  {  
    mutate {
        add_tag => [ "logon_failure" ]
      }
    }
  } 
}
